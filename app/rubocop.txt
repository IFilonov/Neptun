Inspecting 24 files
CCCCCCCCCCCCCCCCCCCCCCWC

Offenses:

channels/application_cable/channel.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
module ApplicationCable
^
channels/application_cable/connection.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
module ApplicationCable
^
controllers/admin/users_controller.rb:1:1: C: Style/Documentation: Missing top-level class documentation comment.
class Admin::UsersController < ApplicationController
^^^^^
controllers/admin/users_controller.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
class Admin::UsersController < ApplicationController
^
controllers/admin/users_controller.rb:1:7: C: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
class Admin::UsersController < ApplicationController
      ^^^^^^^^^^^^^^^^^^^^^^
controllers/admin/users_controller.rb:3:34: C: Style/SymbolArray: Use %i or %I for an array of symbols.
  before_action :set_user, only: [:destroy, :edit, :update]
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
controllers/admin/users_controller.rb:9:3: C: Style/EmptyMethod: Put empty method definitions on a single line.
  def show ...
  ^^^^^^^^
controllers/admin/users_controller.rb:10:1: C: Layout/EmptyLinesAroundMethodBody: Extra empty line detected at method body beginning.
controllers/admin/users_controller.rb:13:3: C: Style/EmptyMethod: Put empty method definitions on a single line.
  def edit ...
  ^^^^^^^^
controllers/admin/users_controller.rb:14:1: C: Layout/EmptyLinesAroundMethodBody: Extra empty line detected at method body beginning.
controllers/admin/users_controller.rb:20:81: C: Metrics/LineLength: Line is too long. [90/80]
      format.html { redirect_to services_url, notice: 'User was successfully destroyed.' }
                                                                                ^^^^^^^^^^
controllers/admin/users_controller.rb:28:81: C: Metrics/LineLength: Line is too long. [94/80]
        format.html { redirect_to admin_users_path, notice: 'User was successfully updated.' }
                                                                                ^^^^^^^^^^^^^^
controllers/admin/users_controller.rb:41:81: C: Metrics/LineLength: Line is too long. [86/80]
  # Never trust parameters from the scary internet, only allow the white list through.
                                                                                ^^^^^^
controllers/application_controller.rb:1:1: C: Style/Documentation: Missing top-level class documentation comment.
class ApplicationController < ActionController::Base
^^^^^
controllers/application_controller.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
class ApplicationController < ActionController::Base
^
controllers/application_controller.rb:2:1: C: Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.
controllers/application_controller.rb:12:58: C: Layout/SpaceAroundOperators: Operator ? should be surrounded by a single space.
    I18n.locale = I18n.locale_available?(params[:lang])  ? params[:lang] : I18n.default_locale
                                                         ^
controllers/application_controller.rb:12:81: C: Metrics/LineLength: Line is too long. [94/80]
    I18n.locale = I18n.locale_available?(params[:lang])  ? params[:lang] : I18n.default_locale
                                                                                ^^^^^^^^^^^^^^
controllers/application_controller.rb:14:1: C: Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
controllers/groups_controller.rb:1:1: C: Style/Documentation: Missing top-level class documentation comment.
class GroupsController < ApplicationController
^^^^^
controllers/groups_controller.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
class GroupsController < ApplicationController
^
controllers/groups_controller.rb:3:35: C: Style/SymbolArray: Use %i or %I for an array of symbols.
  before_action :set_group, only: [:show, :edit, :update, :destroy]
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
controllers/groups_controller.rb:13:3: C: Style/EmptyMethod: Put empty method definitions on a single line.
  def edit ...
  ^^^^^^^^
controllers/groups_controller.rb:21:81: C: Metrics/LineLength: Line is too long. [85/80]
        format.html { redirect_to @group, notice: 'Group was successfully created.' }
                                                                                ^^^^^
controllers/groups_controller.rb:28:3: C: Style/EmptyMethod: Put empty method definitions on a single line.
  def show ...
  ^^^^^^^^
controllers/groups_controller.rb:34:81: C: Metrics/LineLength: Line is too long. [85/80]
        format.html { redirect_to @group, notice: 'Group was successfully updated.' }
                                                                                ^^^^^
controllers/groups_controller.rb:44:81: C: Metrics/LineLength: Line is too long. [89/80]
      format.html { redirect_to groups_url, notice: 'Group was successfully destroyed.' }
                                                                                ^^^^^^^^^
controllers/groups_controller.rb:48:3: C: Layout/EmptyLinesAroundAccessModifier: Keep a blank line before and after private.
  private
  ^^^^^^^
controllers/groups_controller.rb:49:5: C: Layout/CommentIndentation: Incorrect indentation detected (column 4 instead of 2).
    # Use callbacks to share common setup or constraints between actions.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
controllers/scenarios_controller.rb:1:1: C: Style/Documentation: Missing top-level class documentation comment.
class ScenariosController < ApplicationController
^^^^^
controllers/scenarios_controller.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
class ScenariosController < ApplicationController
^
controllers/scenarios_controller.rb:3:38: C: Style/SymbolArray: Use %i or %I for an array of symbols.
  before_action :set_scenario, only: [:edit, :update, :destroy]
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
controllers/scenarios_controller.rb:10:41: C: Style/BracesAroundHashParameters: Redundant curly braces around a hash parameter.
      @scenario.scenario_services.build({ :service_id => s.id })
                                        ^^^^^^^^^^^^^^^^^^^^^^^
controllers/scenarios_controller.rb:10:43: C: Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
      @scenario.scenario_services.build({ :service_id => s.id })
                                          ^^^^^^^^^^^^^^
controllers/scenarios_controller.rb:20:3: C: Style/EmptyMethod: Put empty method definitions on a single line.
  def edit ...
  ^^^^^^^^
controllers/scenarios_controller.rb:27:81: C: Metrics/LineLength: Line is too long. [96/80]
        format.html { redirect_to scenarios_path, notice: 'Scenario was successfully created.' }
                                                                                ^^^^^^^^^^^^^^^^
controllers/scenarios_controller.rb:29:81: C: Metrics/LineLength: Line is too long. [100/80]
        format.html { redirect_to scenarios_path, notice: 'Scenario was not successfully created.' }
                                                                                ^^^^^^^^^^^^^^^^^^^^
controllers/scenarios_controller.rb:37:81: C: Metrics/LineLength: Line is too long. [96/80]
        format.html { redirect_to scenarios_path, notice: 'Scenario was successfully updated.' }
                                                                                ^^^^^^^^^^^^^^^^
controllers/scenarios_controller.rb:47:81: C: Metrics/LineLength: Line is too long. [95/80]
      format.html { redirect_to scenarios_url, notice: 'Scenario was successfully destroyed.' }
                                                                                ^^^^^^^^^^^^^^^
controllers/scenarios_controller.rb:51:3: C: Layout/EmptyLinesAroundAccessModifier: Keep a blank line before and after private.
  private
  ^^^^^^^
controllers/scenarios_controller.rb:52:1: C: Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def set_scenario
^^^^
controllers/scenarios_controller.rb:52:5: C: Layout/IndentationConsistency: Inconsistent indentation detected.
    def set_scenario ...
    ^^^^^^^^^^^^^^^^
controllers/scenarios_controller.rb:56:1: C: Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def scenario_params
^^^^
controllers/scenarios_controller.rb:56:5: C: Layout/IndentationConsistency: Inconsistent indentation detected.
    def scenario_params ...
    ^^^^^^^^^^^^^^^^^^^
controllers/scenarios_controller.rb:57:77: C: Style/SymbolArray: Use %i or %I for an array of symbols.
      params.require(:scenario).permit(:name, scenario_services_attributes: [:service_id, :order, :id])
                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
controllers/scenarios_controller.rb:57:81: C: Metrics/LineLength: Line is too long. [103/80]
      params.require(:scenario).permit(:name, scenario_services_attributes: [:service_id, :order, :id])
                                                                                ^^^^^^^^^^^^^^^^^^^^^^^
controllers/servers_controller.rb:1:1: C: Style/Documentation: Missing top-level class documentation comment.
class ServersController < ApplicationController
^^^^^
controllers/servers_controller.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
class ServersController < ApplicationController
^
controllers/servers_controller.rb:3:36: C: Style/SymbolArray: Use %i or %I for an array of symbols.
  before_action :set_server, only: [:edit, :update, :destroy, :show]
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
controllers/servers_controller.rb:13:3: C: Style/EmptyMethod: Put empty method definitions on a single line.
  def edit ...
  ^^^^^^^^
controllers/servers_controller.rb:16:3: C: Style/EmptyMethod: Put empty method definitions on a single line.
  def show ...
  ^^^^^^^^
controllers/servers_controller.rb:24:81: C: Metrics/LineLength: Line is too long. [87/80]
        format.html { redirect_to @server, notice: 'Server was successfully created.' }
                                                                                ^^^^^^^
controllers/servers_controller.rb:34:81: C: Metrics/LineLength: Line is too long. [87/80]
        format.html { redirect_to @server, notice: 'Server was successfully updated.' }
                                                                                ^^^^^^^
controllers/servers_controller.rb:44:81: C: Metrics/LineLength: Line is too long. [91/80]
      format.html { redirect_to servers_url, notice: 'Server was successfully destroyed.' }
                                                                                ^^^^^^^^^^^
controllers/servers_controller.rb:48:3: C: Layout/EmptyLinesAroundAccessModifier: Keep a blank line before and after private.
  private
  ^^^^^^^
controllers/servers_controller.rb:49:1: C: Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def set_server
^^^^
controllers/servers_controller.rb:49:5: C: Layout/IndentationConsistency: Inconsistent indentation detected.
    def set_server ...
    ^^^^^^^^^^^^^^
controllers/servers_controller.rb:53:1: C: Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def server_params
^^^^
controllers/servers_controller.rb:53:5: C: Layout/IndentationConsistency: Inconsistent indentation detected.
    def server_params ...
    ^^^^^^^^^^^^^^^^^
controllers/services_controller.rb:1:1: C: Style/Documentation: Missing top-level class documentation comment.
class ServicesController < ApplicationController
^^^^^
controllers/services_controller.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
class ServicesController < ApplicationController
^
controllers/services_controller.rb:3:37: C: Style/SymbolArray: Use %i or %I for an array of symbols.
  before_action :set_service, only: [:show, :edit, :update, :destroy, :start, :stop, :restart]
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
controllers/services_controller.rb:3:81: C: Metrics/LineLength: Line is too long. [94/80]
  before_action :set_service, only: [:show, :edit, :update, :destroy, :start, :stop, :restart]
                                                                                ^^^^^^^^^^^^^^
controllers/services_controller.rb:4:38: C: Style/SymbolArray: Use %i or %I for an array of symbols.
  before_action :send_command, only: [:start, :stop, :restart]
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
controllers/services_controller.rb:11:3: C: Style/EmptyMethod: Put empty method definitions on a single line.
  def show ...
  ^^^^^^^^
controllers/services_controller.rb:18:3: C: Style/EmptyMethod: Put empty method definitions on a single line.
  def edit ...
  ^^^^^^^^
controllers/services_controller.rb:26:81: C: Metrics/LineLength: Line is too long. [89/80]
        format.html { redirect_to @service, notice: 'Service was successfully created.' }
                                                                                ^^^^^^^^^
controllers/services_controller.rb:36:81: C: Metrics/LineLength: Line is too long. [89/80]
        format.html { redirect_to @service, notice: 'Service was successfully updated.' }
                                                                                ^^^^^^^^^
controllers/services_controller.rb:46:81: C: Metrics/LineLength: Line is too long. [93/80]
      format.html { redirect_to services_url, notice: 'Service was successfully destroyed.' }
                                                                                ^^^^^^^^^^^^^
controllers/services_controller.rb:50:3: C: Style/EmptyMethod: Put empty method definitions on a single line.
  def start ...
  ^^^^^^^^^
controllers/services_controller.rb:53:3: C: Style/EmptyMethod: Put empty method definitions on a single line.
  def stop ...
  ^^^^^^^^
controllers/services_controller.rb:56:3: C: Style/EmptyMethod: Put empty method definitions on a single line.
  def restart ...
  ^^^^^^^^^^^
controllers/services_controller.rb:62:81: C: Metrics/LineLength: Line is too long. [101/80]
    @answer = @service.send_command(action_name, current_user.ldap_login, current_user.ldap_password)
                                                                                ^^^^^^^^^^^^^^^^^^^^^
controllers/services_controller.rb:70:81: C: Metrics/LineLength: Line is too long. [141/80]
    params.require(:service).permit(:id, :name, :path, :sudo_name, :group_id, :user_id, :state, :start, :stop, :restart, :server_id, :status)
                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
controllers/users/registrations_controller.rb:3:1: C: Style/Documentation: Missing top-level class documentation comment.
class Users::RegistrationsController < Devise::RegistrationsController
^^^^^
controllers/users/registrations_controller.rb:3:7: C: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
class Users::RegistrationsController < Devise::RegistrationsController
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
controllers/users/registrations_controller.rb:45:3: C: Layout/IndentationWidth: Use 2 (not 3) spaces for indentation.
     devise_parameter_sanitizer.permit(:sign_up, keys: [:ldap_login, :ldap_password])
  ^^^
controllers/users/registrations_controller.rb:45:56: C: Style/SymbolArray: Use %i or %I for an array of symbols.
     devise_parameter_sanitizer.permit(:sign_up, keys: [:ldap_login, :ldap_password])
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
controllers/users/registrations_controller.rb:45:81: C: Metrics/LineLength: Line is too long. [85/80]
     devise_parameter_sanitizer.permit(:sign_up, keys: [:ldap_login, :ldap_password])
                                                                                ^^^^^
helpers/application_helper.rb:1:1: C: Style/Documentation: Missing top-level module documentation comment.
module ApplicationHelper
^^^^^^
helpers/application_helper.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
module ApplicationHelper
^
helpers/groups_helper.rb:1:1: C: Style/Documentation: Missing top-level module documentation comment.
module GroupsHelper
^^^^^^
helpers/groups_helper.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
module GroupsHelper
^
helpers/servers_helper.rb:1:1: C: Style/Documentation: Missing top-level module documentation comment.
module ServersHelper
^^^^^^
helpers/servers_helper.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
module ServersHelper
^
helpers/services_helper.rb:1:1: C: Style/Documentation: Missing top-level module documentation comment.
module ServicesHelper
^^^^^^
helpers/services_helper.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
module ServicesHelper
^
jobs/application_job.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
class ApplicationJob < ActiveJob::Base
^
mailers/application_mailer.rb:1:1: C: Style/Documentation: Missing top-level class documentation comment.
class ApplicationMailer < ActionMailer::Base
^^^^^
mailers/application_mailer.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
class ApplicationMailer < ActionMailer::Base
^
models/application_record.rb:1:1: C: Style/Documentation: Missing top-level class documentation comment.
class ApplicationRecord < ActiveRecord::Base
^^^^^
models/application_record.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
class ApplicationRecord < ActiveRecord::Base
^
models/group.rb:1:1: C: Style/Documentation: Missing top-level class documentation comment.
class Group < ApplicationRecord
^^^^^
models/group.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
class Group < ApplicationRecord
^
models/group.rb:2:1: C: Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    has_many :services
^^^^
models/group.rb:4:1: C: Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    validates :name, presence: true
^^^^
models/group.rb:5:1: C: Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    validates :name, uniqueness: true
^^^^
models/scenario.rb:1:1: C: Style/Documentation: Missing top-level class documentation comment.
class Scenario < ApplicationRecord
^^^^^
models/scenario.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
class Scenario < ApplicationRecord
^
models/scenario.rb:3:23: C: Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
  has_many :services, :through => :scenario_services
                      ^^^^^^^^^^^
models/scenario.rb:10:81: C: Metrics/LineLength: Line is too long. [128/80]
    scenario_services.where.not(order: nil).sort_by { |sort| sort[:order] }.map { |ss| "#{ss.order}. #{ss.service.name} " }.join
                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
models/scenario_service.rb:1:1: C: Style/Documentation: Missing top-level class documentation comment.
class ScenarioService < ApplicationRecord
^^^^^
models/scenario_service.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
class ScenarioService < ApplicationRecord
^
models/scenario_service.rb:5:59: C: Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
  validates :scenario_id, uniqueness: { scope: :service_id}
                                                          ^
models/server.rb:1:1: C: Style/Documentation: Missing top-level class documentation comment.
class Server < ApplicationRecord
^^^^^
models/server.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
class Server < ApplicationRecord
^
models/service.rb:1:1: C: Style/Documentation: Missing top-level class documentation comment.
class Service < ApplicationRecord
^^^^^
models/service.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
class Service < ApplicationRecord
^
models/service.rb:11:17: C: Style/RedundantFreeze: Do not freeze immutable objects, as freezing them has no effect.
  MAX_COLUMNS = 4.freeze
                ^^^^^^^^
models/service.rb:12:24: C: Style/RedundantFreeze: Do not freeze immutable objects, as freezing them has no effect.
  MAX_ROWS_IN_COLUMN = 20.freeze
                       ^^^^^^^^^
models/service.rb:19:5: C: Style/OrAssignment: Use the double pipe equals operator ||= instead.
    size = size ? size : Service.all.size
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
models/service.rb:19:17: C: Style/UnneededCondition: Use double pipes || instead.
    size = size ? size : Service.all.size
                ^^^^^^^^
models/service.rb:29:5: C: Style/OrAssignment: Use the double pipe equals operator ||= instead.
    ssh = ssh ? ssh : SshService.new(server.host_name, login, password)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
models/service.rb:29:15: C: Style/UnneededCondition: Use double pipes || instead.
    ssh = ssh ? ssh : SshService.new(server.host_name, login, password)
              ^^^^^^^
models/user.rb:1:1: C: Style/Documentation: Missing top-level class documentation comment.
class User < ApplicationRecord
^^^^^
models/user.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
class User < ApplicationRecord
^
services/ssh_service.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
require 'net/ssh'
^
services/ssh_service.rb:3:1: C: Style/Documentation: Missing top-level class documentation comment.
class SshService
^^^^^
services/ssh_service.rb:9:24: C: Style/NumericPredicate: Use cmd&.length.positive? instead of cmd&.length > 0.
    @ssh.exec!(cmd) if cmd&.length > 0
                       ^^^^^^^^^^^^^^^
services/ssh_service.rb:9:35: W: Lint/SafeNavigationChain: Do not chain ordinary method call after safe navigation operator.
    @ssh.exec!(cmd) if cmd&.length > 0
                                  ^^^^
services/ssh_service.rb:19:1: C: Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
workers/states_worker.rb:1:1: C: Style/Documentation: Missing top-level class documentation comment.
class StatesWorker
^^^^^
workers/states_worker.rb:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment # frozen_string_literal: true.
class StatesWorker
^
workers/states_worker.rb:5:3: C: Metrics/AbcSize: Assignment Branch Condition size for perform is too high. [36.19/15]
  def perform(duration) ...
  ^^^^^^^^^^^^^^^^^^^^^
workers/states_worker.rb:5:3: C: Metrics/MethodLength: Method has too many lines. [25/10]
  def perform(duration) ...
  ^^^^^^^^^^^^^^^^^^^^^
workers/states_worker.rb:13:27: C: Style/UnneededCondition: Use double pipes || instead.
        status = s.status ? s.status : 0
                          ^^^^^^^^^^^^
workers/states_worker.rb:14:9: C: Style/Next: Use next to skip iteration.
        if s&.user&.ldap_login && s.state
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
workers/states_worker.rb:19:49: C: Layout/AlignArguments: Align the arguments of a method call if they span more than one line.
                                                s.user.ldap_login,
                                                ^^^^^^^^^^^^^^^^^
workers/states_worker.rb:20:49: C: Layout/AlignArguments: Align the arguments of a method call if they span more than one line.
                                                s.user.ldap_password)
                                                ^^^^^^^^^^^^^^^^^^^^
workers/states_worker.rb:31:1: C: Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
workers/states_worker.rb:33:10: C: Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    puts "Exit!"
         ^^^^^^^

24 files inspected, 131 offenses detected
